{"version":3,"file":"static/webpack/static/development/pages/index.js.2a9ece3601675ebdf1e2.hot-update.js","sources":["webpack:///./src/components/game/Game/index.tsx"],"sourcesContent":["import { FunctionComponent, useState } from 'react';\nimport Center from '@2048/layout/Center';\nimport Board from '@2048/components/game/Board';\nimport styled from 'styled-components';\nimport { BoardShift } from '@2048/types/game';\nimport { useDispatch, useSelector } from 'react-redux';\nimport gameAction from '@2048/redux/actions/game.action';\nimport { $board, $won } from '@2048/redux/selectors/game.selector';\n// import { Modal } from 'antd';\n\nconst Wrapper = styled.div`\n   {\n    padding-bottom: 10vh;\n    height: 100%;\n  }\n`;\n\nconst MOUSE_DIST_THRESHOLD = 50;\n\nconst Game: FunctionComponent = () => {\n  const [shift, setShift] = useState<null | BoardShift>(null);\n  const board = useSelector($board);\n  // const lost = useSelector($lost);\n  const won = useSelector($won);\n  const dispatch = useDispatch();\n\n  let mouseStart = { x: 0, y: 0 };\n\n  function onKeyDown(e: React.KeyboardEvent) {\n    if (!shift) {\n      switch (e.key) {\n        case 'ArrowUp':\n          setShift('up');\n          break;\n        case 'ArrowDown':\n          setShift('down');\n          break;\n        case 'ArrowLeft':\n          setShift('left');\n          break;\n        case 'ArrowRight':\n          setShift('right');\n          break;\n      }\n    }\n  }\n\n  function onMouseUp(e: React.MouseEvent) {\n    const diffX = e.screenX - mouseStart.x;\n    const diffY = e.screenY - mouseStart.y;\n    if (shift) return;\n    if (Math.abs(diffY) * 1.3 > Math.abs(diffX)) {\n      if (diffY > MOUSE_DIST_THRESHOLD) {\n        setShift('down');\n      } else if (diffY < -MOUSE_DIST_THRESHOLD) {\n        setShift('up');\n      }\n    } else {\n      if (diffX > MOUSE_DIST_THRESHOLD) {\n        setShift('right');\n      } else if (diffX < 0) {\n        setShift('left');\n      }\n    }\n  }\n\n  function onMouseDown(e: React.MouseEvent) {\n    mouseStart = { x: e.screenX, y: e.screenY };\n  }\n\n  function onShiftEnd(shift: BoardShift) {\n    setShift(null);\n    const shiftAction = gameAction.shiftBoard(board, shift);\n    dispatch(shiftAction);\n    dispatch(gameAction.generateRandomCell(shiftAction.body!.board, 2));\n  }\n\n  // useEffect(() => {\n  //   if (won) {\n  //     Modal.success({\n  //       title: 'You won!'\n  //     });\n  //   }\n  // }, [won]);\n\n  // useEffect(() => {\n  //   if (lost) {\n  //     Modal.error({\n  //       title: 'You lost!'\n  //     });\n  //   }\n  // }, [lost]);\n\n  return (\n    <>\n      <Wrapper\n        onKeyDown={onKeyDown}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        tabIndex={0}>\n        <Center>\n          <Board shift={shift} onShiftEnd={onShiftEnd} />\n        </Center>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Game;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}